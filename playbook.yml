---
- name: Acme-Air Container Image Build
  hosts: local
  gather_facts: true

  collections:
    - containers.podman

  tasks:

  - name: Install Java, Git, Podman
    dnf:
      name: 
      - podman
      - java-1.8.0-openjdk
      - java-1.8.0-openjdk-headless
      - java-1.8.0-openjdk-devel
      - git
      state: latest

  - name: Download and Unarchive Maven
    unarchive:
      src: "https://downloads.apache.org/maven/maven-{{ maven_major }}/{{ maven_version }}/binaries/apache-maven-{{ maven_version }}-bin.tar.gz"
      dest: "{{ maven_home_parent_directory }}"
      remote_src: yes

  - name: Create a symbolic link to have more control over Maven versions and updates
    file:
      src: "{{ maven_home_parent_directory }}/apache-maven-{{maven_version}}/bin/mvn"
      dest: "/usr/bin/mvn"
      state: link

  - name: Configure the environment for Apache Maven
    blockinfile:
      path: "{{ maven_env_file }}"
      create: yes
      state: present
      owner: root
      group: root
      mode: '0755'
      block: |
        export JAVA_HOME=/usr/lib/jvm/jre-openjdk
        export M2_HOME={{ maven_home_parent_directory }}/apache-maven-{{ maven_version }}
        export MAVEN_HOME={{ maven_home_parent_directory }}/apache-maven-{{ maven_version }}
        export PATH=$PATH:$M2_HOME/bin

  - name: Load the environment for Apache Maven
    shell: "source {{ maven_env_file }}"

  - name: Clean acme-air directory if exists
    file:
      state: absent
      path: "{{ project_folder }}"

  - name: Create acme-air directory
    file:
      path: "{{ project_folder }}"
      state: directory
      mode: '0755'

  - name: Checkout "acme-air microservices" from github
    git:
      repo: "{{ item.github_repository }}"
      dest: "{{ item.directory_path }}"
    loop:
      "{{ microservices }}"

  - name: Maven build "acme-air microservices"
    command: mvn clean package
    args:
      chdir: "{{ item.directory_path }}"
    loop:
      "{{ microservices }}"

  - name: Build & Push images
    podman_image:
      name: "{{ item.name }}"
      path: "{{ item.directory_path }}"
      tag: "{{ ansible_machine }}"
      build:
        format: docker
      push: yes
      username: "{{ container_registry_username }}" 
      password: "{{ container_registry_password }}"
    loop:
      "{{ microservices }}"
    register: result
    until: result is not failed
    retries: 5
...